{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Launch two FortiGates within your VPC in A-P cluster running in a dual AZ",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
                        "VPCID",
                        "VPCCIDR",
						"PublicSubnet1",
						"PublicSubnet1RouterIP",
						"PrivateSubnet1",
						"PrivateSubnet1RouterIP",
						"HeartbeatSubnet1",
						"MgmtSubnet1",
						"MgmtSubnet1RouterIP",
						"PublicSubnet2",
						"PublicSubnet2RouterIP",
						"PrivateSubnet2",
						"PrivateSubnet2RouterIP",
						"HeartbeatSubnet2",
						"MgmtSubnet2",
						"MgmtSubnet2RouterIP"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"AZForFGTA",
						"AZForFGTB",
						"FGTInstanceType",
						"CIDRForFGTAccess",
						"KeyPair",
						"HAsecret"
					]
				},
				{
					"Label": {
						"default": "FortiGate IP Configuration"
					},
					"Parameters": [
						"IPAPublicSubnet1",
						"IPAPrivateSubnet1",
						"IPAHeartBeatSubnet1",
						"IPAMgmtSubnet1",
						"IPBPublicSubnet2",
						"IPBPrivateSubnet2",
						"IPBHeartBeatSubnet2",
						"IPBMgmtSubnet2"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Enter the VPC CIDR that you are using"
		},
		"VPCCIDR": {
			"Type": "String",
			"Description": "Enter the VPC CIDR of the above VPC. Ex: 10.0.0.0/16"
		},
		"AZForFGTA": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select the first AZ for FortiGateA"
		},
		"AZForFGTB": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select the second AZ for FortiGateB"
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the Public1 subnet"
		},
		"IPAPublicSubnet1": {
			"Type": "String",
			"Description": "Indicate the IP of the interface of FGTA attached to public subnet1. Ex: 10.0.1.12/24"
		},
        "PublicSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.1.1",
			"Description": "Provide the IP of the gateway for the public subnet1"
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the private subnet1"
		},
		"IPAPrivateSubnet1": {
			"Type": "String",
			"Description": "Indicate the IP of the interface of FGTA attached to private subnet1. Ex: 10.0.2.12/24"
		},
        "PrivateSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.2.1",
			"Description": "Provide the IP of the gateway for the private subnet1"
		},
		"HeartbeatSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the heartbeat subnet1"
		},
		"MgmtSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the management subnet1"
		},
		"IPAMgmtSubnet1": {
			"Type": "String",
			"Description": "Indicate the IP of the interface of FGTA attached to management subnet1.  Ex: 10.0.4.12/24"
		},
        "MgmtSubnet1RouterIP": {
			"Type": "String",
			"Default": "10.0.4.1",
			"Description": "Provide the IP of the gateway for the management subnet1"
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the public subnet2"
		},
		"IPBPublicSubnet2": {
			"Type": "String",
			"Description": "Indicate the IP of the interface of FGTB attached to public subnet2. Ex: 10.0.10.12/24"
		},
        "PublicSubnet2RouterIP": {
			"Type": "String",
            "Default": "10.0.10.1",
            "Description": "Provide the IP of the gateway for the public subnet2"
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the private subnet2"
		},
		"IPBPrivateSubnet2": {
			"Type": "String",
			"Description": "Indicate the IP of the interface of FGTB attached to private subnet2. Ex: 10.0.20.12/24"
		},
        "PrivateSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.20.1",
			"Description": "Provide the IP of the gateway for the private subnet2"
		},
		"HeartbeatSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the heartbeat subnet2"
		},
		"MgmtSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the management subnet2"
		},
		"IPBMgmtSubnet2": {
			"Type": "String",
			"Description": "Indicate the IP of the interface of FGTB attached to management subnet2. Ex: 10.0.40.12/24"
		},
        "MgmtSubnet2RouterIP": {
			"Type": "String",
			"Default": "10.0.40.1",
			"Description": "Provide the IP of the gateway for the management subnet2"
		},
		"FGTInstanceType": {
			"Type": "String",
			"Default": "c5.xlarge",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"t3.xlarge",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge"
			]
		},
		"CIDRForFGTAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Enter the CIDR from which FortiGate instances need to be accessed from"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select the keypair for the FortiGates"
		},
		"HAsecret": {
			"Type": "String",
			"Description": "Secret for HA peer identification"
		},
		"IPAHeartBeatSubnet1": {
			"Type": "String",
			"Description": "Enter the IP address in CIDR form for the heartbeat interface of FortiGateA (IP from heartbeat Subnet1). Ex: 10.0.3.10/24"
		},
		"IPBHeartBeatSubnet2": {
			"Type": "String",
			"Description": "Enter the IP address in CIDR form for the heartbeat interface of FortiGateB (IP from heartbeat Subnet2). Ex: 10.0.30.10/24"
		}
	},
	"Mappings": {
		"RegionMap": {
	    "eu-north-1": {
                "fgtami": "ami-026922081bf660a55"
            },
            "ap-south-1": {
                "fgtami": "ami-0a40a56775ad40c3c"
            },
            "eu-west-3": {
                "fgtami": "ami-02e98b116ca7b3e07"
            },
            "eu-west-2": {
                "fgtami": "ami-094ac06a8c76d4ab9"
            },
            "eu-west-1": {
                "fgtami": "ami-0313241e3849e200d"
            },
            "ap-northeast-3": {
                "fgtami": "ami-097484810a0eb514c"
            },
			"ap-northeast-2": {
                "fgtami": "ami-0f69a72652e376805"
            },
            "ap-northeast-1": {
                "fgtami": "ami-0b81ee38d9205761f"
            },
            "sa-east-1": {
                "fgtami": "ami-0d4a43052db2cfb3d"
            },
            "ca-central-1": {
                "fgtami": "ami-08ac0958fe75153e2"
            },
            "ap-southeast-1": {
                "fgtami": "ami-039794888c9b1e500"
            },
            "ap-southeast-2": {
                "fgtami": "ami-091b98549e5675bbe"
			},
            "eu-central-1": {
                "fgtami": "ami-0781f07684853501c"
            },
            "us-east-1": {
                "fgtami": "ami-02dfec160890bf070"
            },
            "us-east-2": {
                "fgtami": "ami-045bf7672b62be89c"
            },
            "us-west-1": {
                "fgtami": "ami-088426c38c82189c4"
            },
            "us-west-2": {
                "fgtami": "ami-0aeebdd62d4b9393e"
			}
		}
	},
	"Conditions": {},
	"Resources": {
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "ApplicationPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:Describe*",
										"ec2:AssociateAddress",
										"ec2:AssignPrivateIpAddresses",
										"ec2:UnassignPrivateIpAddresses",
										"ec2:ReplaceRoute",
										"s3:GetObject"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"FGTSecGrpBase": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FGTSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": 0,
						"ToPort": 65535,
						"CidrIp": {
							"Ref": "CIDRForFGTAccess"
						}
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": 0,
						"ToPort": 65535,
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FGTSecGrpFGTRule": {
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"Description": "Allow FGTs to access each other",
				"IpProtocol": "-1",
				"FromPort": 0,
				"ToPort": 65535,
				"SourceSecurityGroupId": {
					"Ref": "FGTSecGrpBase"
				}
			}
		},
		"FgtA": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"fgtami"
					]
				},
				"InstanceType": {
					"Ref": "FGTInstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI2"
						},
						"DeviceIndex": "2"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI3"
						},
						"DeviceIndex": "3"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FgtA"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["\n", [
							"config system vdom-exception",
							"edit 0",
							"set object router.static",
							"next",
							"edit 0",
							"set object system.interface",
							"end",
                            "config system global",
                            "set hostname FGTA",
                            "end",
                            "config system interface",
                            "edit port1",
                            "set alias public",
							"set mode static",
							{ "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPAPublicSubnet1"}]]},
                            "set allowaccess ping https ssh",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "edit port2",
                            "set alias private",
							"set mode static",
							{ "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPAPrivateSubnet1"}]]},
                            "set allowaccess ping https ssh",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "edit port3",
                            "set alias hasync",
                            "set mode static",
                            { "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPAHeartBeatSubnet1"}]]},
                            "set allowaccess ping",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "edit port4",
                            "set alias hamgmt",
							"set mode static",
							{ "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPAMgmtSubnet1"}]]},
                            "set allowaccess ping https ssh",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "end",
                            "config router static",
                            "edit 1",
                            "set device port1",
                            { "Fn::Join" : [ "", [ "set gateway ",{"Ref":"PublicSubnet1RouterIP"}]]},
                            "next",
                            "edit 2",
                            { "Fn::Join" : [ "", [ "set dst ",{"Ref":"VPCCIDR"}]]},
                            "set device port2",
                            { "Fn::Join" : [ "", [ "set gateway ",{"Ref":"PrivateSubnet1RouterIP"}]]},
                            "next",
                            "end",
                            "config firewall policy",
                            "edit 1",
                            "set name outbound-all",
                            "set srcintf port2",
                            "set dstintf port1",
                            "set srcaddr all",
                            "set dstaddr all",
                            "set action accept",
                            "set schedule always",
                            "set service ALL",
                            "set logtraffic all",
                            "set nat enable",
                            "next",
                            "end",
                            "config system ha",
                            "set group-name \"fortinet\"",
                            "set group-id 1",
                            { "Fn::Join" : [ "", [ "set password ",{"Ref":"HAsecret"}]]},
                            "set mode a-p",
                            "set hbdev port3 50",
                            "set session-pickup enable",
                            "set ha-mgmt-status enable",
                            "config ha-mgmt-interface",
                            "edit 1",
                            "set interface port4",
                            { "Fn::Join" : [ "", [ "set gateway ",{"Ref":"MgmtSubnet1RouterIP"}]]},
                            "next",
                            "end",
                            "set override disable",
                            "set priority 255",
                            "set unicast-hb enable",
                            { "Fn::Join" : [ "", [ "set unicast-hb-peerip ",{"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPBHeartBeatSubnet2"}]}]}]]},
                            "end"
							]
						]
					}
				}
			}
		},
		"FgtB": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"fgtami"
					]
				},
				"InstanceType": {
					"Ref": "FGTInstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI2"
						},
						"DeviceIndex": "2"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI3"
						},
						"DeviceIndex": "3"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FgtB"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": ["\n", [
                            "config system global",
                            "set hostname FGTB",
                            "end",
                            "config system interface",
                            "edit port1",
                            "set alias public",
							"set mode static",
							{ "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPBPublicSubnet2"}]]},
                            "set allowaccess ping https ssh",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "edit port2",
                            "set alias private",
							"set mode static",
							{ "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPBPrivateSubnet2"}]]},
                            "set allowaccess ping https ssh",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "edit port3",
                            "set alias hasync",
                            "set mode static",
                            { "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPBHeartBeatSubnet2"}]]},
                            "set allowaccess ping",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "edit port4",
                            "set alias hamgmt",
							"set mode static",
							{ "Fn::Join" : [ "", [ "set ip ",{"Ref":"IPBMgmtSubnet2"}]]},
                            "set allowaccess ping https ssh",
                            "set mtu-override enable",
                            "set mtu 9001",
                            "next",
                            "end",
                            "config router static",
                            "edit 1",
                            "set device port1",
                            { "Fn::Join" : [ "", [ "set gateway ",{"Ref":"PublicSubnet2RouterIP"}]]},
                            "next",
                            "edit 2",
                            { "Fn::Join" : [ "", [ "set dst ",{"Ref":"VPCCIDR"}]]},
                            "set device port2",
                            { "Fn::Join" : [ "", [ "set gateway ",{"Ref":"PrivateSubnet2RouterIP"}]]},
                            "next",
                            "end",
                            "config firewall policy",
                            "edit 1",
                            "set name outbound-all",
                            "set srcintf port2",
                            "set dstintf port1",
                            "set srcaddr all",
                            "set dstaddr all",
                            "set action accept",
                            "set schedule always",
                            "set service ALL",
                            "set logtraffic all",
                            "set nat enable",
                            "next",
                            "end",
                            "config system ha",
                            "set group-name \"fortinet\"",
                            "set group-id 1",
                            { "Fn::Join" : [ "", [ "set password ",{"Ref":"HAsecret"}]]},
                            "set mode a-p",
                            "set hbdev port3 50",
                            "set session-pickup enable",
                            "set ha-mgmt-status enable",
                            "config ha-mgmt-interface",
                            "edit 1",
                            "set interface port4",
                            { "Fn::Join" : [ "", [ "set gateway ",{"Ref":"MgmtSubnet2RouterIP"}]]},
                            "next",
                            "end",
                            "set override disable",
                            "set priority 100",
                            "set unicast-hb enable",
                            { "Fn::Join" : [ "", [ "set unicast-hb-peerip ",{"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPAHeartBeatSubnet1"}]}]}]]},
                            "end"
                            ]
                        ]
					}
				}
			}
		},
		"FGTAENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"PrivateIpAddress": {
					"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPAPublicSubnet1"}]}]
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				]
			}
		},
		"FGTBENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"PrivateIpAddress": {
					"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPBPublicSubnet2"}]}]
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				]
			}
		},
		"FGTAENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"PrivateIpAddress": {
					"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPAPrivateSubnet1"}]}]
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI1"
								]
							]
						}
					}
				]
			}
		},
		"FGTBENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"PrivateIpAddress": {
					"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPBPrivateSubnet2"}]}]
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI1"
								]
							]
						}
					}
				]
			}
		},
		"FGTAENI2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "HeartbeatSubnet1"
				},
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "IPAHeartBeatSubnet1"
										}
									]
								}
							]
						},
						"Primary": true
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI2"
								]
							]
						}
					}
				]
			}
		},
		"FGTBENI2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "HeartbeatSubnet2"
				},
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "IPBHeartBeatSubnet2"
										}
									]
								}
							]
						},
						"Primary": true
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI2"
								]
							]
						}
					}
				]
			}
		},
		"FGTAENI3": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port4",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "MgmtSubnet1"
				},
				"PrivateIpAddress": {
					"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPAMgmtSubnet1"}]}]
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI3"
								]
							]
						}
					}
				]
			}
		},
		"FGTBENI3": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port4",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": false,
				"SubnetId": {
					"Ref": "MgmtSubnet2"
				},
				"PrivateIpAddress": {
					"Fn::Select" : [ "0", { "Fn::Split": ["/", {"Ref": "IPBMgmtSubnet2"}]}]
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI3"
								]
							]
						}
					}
				]
			}
		},
		"ClusterEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtA"
		},
		"FgtAMgmtEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtA"
		},
		"FgtBMgmtEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtB"
		},
		"ClusterAEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"ClusterEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTAENI0"
				}
			}
		},
		"FgtAMgmtEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FgtAMgmtEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTAENI3"
				}
			}
		},
		"FgtBMgmtEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FgtBMgmtEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTBENI3"
				}
			}
		}
	},
	"Outputs": {
		"FGTAURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "FgtAMgmtEIP"
						}
					]
				]
			},
			"Description": "URL to access FortigateA"
		},
		"FGTUsername": {
			"Value": "admin",
			"Description": "Username to access Fortigates"
		},
		"FGTAPassword": {
			"Value": {
				"Ref": "FgtA"
			},
			"Description": "Password to access FortigateA"
		},
		"FGTBPassword": {
			"Value": {
				"Ref": "FgtB"
			},
			"Description": "Password to access FortigateB"
		},
		"FGTBURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "FgtBMgmtEIP"
						}
					]
				]
			},
			"Description": "URL to access FortigateB"
		}
	}
}
