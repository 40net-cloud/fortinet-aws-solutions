{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Launch two FortiGates within your VPC in A-P cluster running in a dual AZ",
	"Metadata": {
		"AWS::CloudFormation::Interface": {
			"ParameterGroups": [
				{
					"Label": {
						"default": "VPC Configuration"
					},
					"Parameters": [
						"VPCID",
						"VPCCIDR",
						"PublicSubnet1",
						"PrivateSubnet1",
						"HeartbeatSubnet1",
						"MgmtSubnet1",
						"PublicSubnet2",
						"PrivateSubnet2",
						"HeartbeatSubnet2",
						"MgmtSubnet2",
						"RouteTableMgmtSubnet2"
					]
				},
				{
					"Label": {
						"default": "FortiGate Instance Configuration"
					},
					"Parameters": [
						"AZForFGTA",
						"AZForFGTB",
						"FGTInstanceType",
						"CIDRForFGTAccess",
						"KeyPair",
						"HAsecret",
						"InitS3Bucket",
						"InitS3BucketRegion",
						"FortiGateALicenseFile",
						"FortiGateBLicenseFile"
					]
				},
				{
					"Label": {
						"default": "FortiGate IP Configuration"
					},
					"Parameters": [
						"FortiGateAHeartbeatIP",
						"FortiGateBHeartbeatIP"
					]
				}
			]
		}
	},
	"Parameters": {
		"VPCID": {
			"Type": "AWS::EC2::VPC::Id",
			"Description": "Enter the VPC CIDR that you are using"
		},
		"VPCCIDR": {
			"Type": "String",
			"Description": "Enter the VPC CIDR of the above VPC. Ex: 10.0.0.0/16"
		},
		"AZForFGTA": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select the first AZ for FortiGateA"
		},
		"AZForFGTB": {
			"Type": "AWS::EC2::AvailabilityZone::Name",
			"Description": "Select the second AZ for FortiGateB"
		},
		"PublicSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the public subnet1"
		},
		"PrivateSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the private subnet1"
		},
		"HeartbeatSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the heartbeat subnet1"
		},
		"MgmtSubnet1": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the management subnet1"
		},
		"PublicSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the public subnet2"
		},
		"PrivateSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the private subnet2"
		},
		"HeartbeatSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the heartbeat subnet2"
		},
		"MgmtSubnet2": {
			"Type": "AWS::EC2::Subnet::Id",
			"Description": "Select the management subnet2"
		},
		"RouteTableMgmtSubnet2": {
			"Type": "String",
			"Description": "Indicate the routetable Id for management subnet of FGTB. Ex: rtb-XXXXX (A VPC endpoint to S3 bucket will be created)"
		},
		"FGTInstanceType": {
			"Type": "String",
			"Default": "c5.xlarge",
			"Description": "Select the instance type for the FortiGates",
			"AllowedValues": [
				"t3.xlarge",
				"c5.xlarge",
				"c5.2xlarge",
				"c5.4xlarge",
				"c5.9xlarge",
				"c5.18xlarge"
			]
		},
		"CIDRForFGTAccess": {
			"Type": "String",
			"Default": "0.0.0.0/0",
			"Description": "Enter the CIDR from which FortiGate instances need to be accessed from"
		},
		"KeyPair": {
			"Type": "AWS::EC2::KeyPair::KeyName",
			"Description": "Select the keypair for the FortiGates"
		},
		"HAsecret": {
			"Type": "String",
			"Description": "Secret for HA peer identification"
		},
		"InitS3Bucket": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the Init S3 Bucket name, where your license files and config files exists"
		},
		"InitS3BucketRegion": {
			"Type": "String",
			"Description": "Select the Region where the Init S3 Bucket exists",
			"AllowedValues": [
				"ap-northeast-1",
				"ap-northeast-2",
				"ap-south-1",
				"ap-southeast-1",
				"ap-southeast-2",
				"ca-central-1",
				"eu-central-1",
				"eu-north-1",
				"eu-west-1",
				"eu-west-2",
				"eu-west-3",
				"sa-east-1",
				"us-east-1",
				"us-east-2",
				"us-west-1",
				"us-west-2"
			]
		},
		"FortiGateALicenseFile": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the name of the license file in the Init S3 Bucket for FortiGate1 (ie fgtA.lic or prefix/fgtA.lic)"
		},
		"FortiGateBLicenseFile": {
			"Type": "String",
			"MinLength": "1",
			"Description": "Provide the name of the license file in the Init S3 Bucket for FortiGate2 (ie fgtB.lic or prefix/fgtB.lic)"
		},
		"FortiGateAHeartbeatIP": {
			"Type": "String",
			"Description": "Enter the IP address in CIDR form for the heartbeat interface of FortiGateA (IP from heartbeat Subnet1). Ex: 10.0.3.10/24"
		},
		"FortiGateBHeartbeatIP": {
			"Type": "String",
			"Description": "Enter the IP address in CIDR form for the heartbeat interface of FortiGateB (IP from heartbeat Subnet2). Ex: 10.0.30.10/24"
		}
	},
	"Mappings": {
		"RegionMap": {
			"eu-north-1": {
				"fgtami": "ami-77bc3709"
			},
			"ap-south-1": {
					"fgtami": "ami-0edaf606c44aa76c2"
			},
			"eu-west-3": {
					"fgtami": "ami-06f4dce9c3ae2c504"
			},
			"eu-west-2": {
					"fgtami": "ami-00393f6e18472119a"
			},
			"eu-west-1": {
					"fgtami": "ami-0df5474a79001c6c2"
			},
			"ap-northeast-2": {
					"fgtami": "ami-0a162910b165e39ac"
			},
			"ap-northeast-1": {
					"fgtami": "ami-0701aa07e48c4d908"
			},
			"sa-east-1": {
					"fgtami": "ami-044322b7156fc185b"
			},
			"ca-central-1": {
					"fgtami": "ami-0dbfcb720983c1ee5"
			},
			"ap-southeast-1": {
					"fgtami": "ami-05d2f32cd86583980"
			},
			"ap-southeast-2": {
					"fgtami": "ami-04b7b0eb6f540c1c2"
			},
			"eu-central-1": {
					"fgtami": "ami-0e7e6465d4df6d255"
			},
			"us-east-1": {
					"fgtami": "ami-07118e58ea57bad8d"
			},
			"us-east-2": {
					"fgtami": "ami-028fac923a06e4b98"
			},
			"us-west-1": {
					"fgtami": "ami-08aa9a2a137615c0e"
			},
			"us-west-2": {
					"fgtami": "ami-0869ff94be017b4e5"
			}
		}
	},
	"Conditions": {},
	"Resources": {
		"InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"ec2.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "ApplicationPolicy",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"ec2:Describe*",
										"ec2:AssociateAddress",
										"ec2:AssignPrivateIpAddresses",
										"ec2:UnassignPrivateIpAddresses",
										"ec2:ReplaceRoute",
										"s3:GetObject"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"Properties": {
				"Path": "/",
				"Roles": [
					{
						"Ref": "InstanceRole"
					}
				]
			}
		},
		"FGTSecGrpBase": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"VpcId": {
					"Ref": "VPCID"
				},
				"GroupDescription": "FGTSecGrp",
				"SecurityGroupIngress": [
					{
						"Description": "Allow remote access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "CIDRForFGTAccess"
						}
					},
					{
						"Description": "Allow local VPC access to FGT",
						"IpProtocol": "-1",
						"FromPort": "0",
						"ToPort": "65535",
						"CidrIp": {
							"Ref": "VPCCIDR"
						}
					}
				]
			}
		},
		"FGTSecGrpFGTRule": {
			"DependsOn": "FGTSecGrpBase",
			"Type": "AWS::EC2::SecurityGroupIngress",
			"Properties": {
				"GroupId": {
					"Ref": "FGTSecGrpBase"
				},
				"Description": "Allow FGTs to access each other",
				"IpProtocol": "-1",
				"FromPort": "0",
				"ToPort": "65535",
				"SourceSecurityGroupId": {
					"Ref": "FGTSecGrpBase"
				}
			}
		},
		"FgtA": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"fgtami"
					]
				},
				"InstanceType": {
					"Ref": "FGTInstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI2"
						},
						"DeviceIndex": "2"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTAENI3"
						},
						"DeviceIndex": "3"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FgtA"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"{\n",
								"\"bucket\"",
								" : \"",
								{
									"Ref": "InitS3Bucket"
								},
								"\"",
								",\n",
								"\"region\"",
								" : ",
								"\"",
								{
									"Ref": "InitS3BucketRegion"
								},
								"\"",
								",\n",
								"\"license\"",
								" : ",
								"\"",
								"/",
								{
									"Ref": "FortiGateALicenseFile"
								},
								"\"",
								",\n",
								"\"config\"",
								" : ",
								"\"",
								"/fgtA.txt\"",
								"\n",
								"}"
							]
						]
					}
				}
			}
		},
		"FgtB": {
			"Type": "AWS::EC2::Instance",
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"RegionMap",
						{
							"Ref": "AWS::Region"
						},
						"fgtami"
					]
				},
				"InstanceType": {
					"Ref": "FGTInstanceType"
				},
				"IamInstanceProfile": {
					"Ref": "InstanceProfile"
				},
				"KeyName": {
					"Ref": "KeyPair"
				},
				"NetworkInterfaces": [
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI0"
						},
						"DeviceIndex": "0"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI1"
						},
						"DeviceIndex": "1"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI2"
						},
						"DeviceIndex": "2"
					},
					{
						"NetworkInterfaceId": {
							"Ref": "FGTBENI3"
						},
						"DeviceIndex": "3"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"-FgtB"
								]
							]
						}
					}
				],
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"",
							[
								"{\n",
								"'bucket' : '",
								{
									"Ref": "InitS3Bucket"
								},
								"',\n",
								"'region' : '",
								{
									"Ref": "InitS3BucketRegion"
								},
								"',\n",
								"'license' : '/",
								{
									"Ref": "FortiGateBLicenseFile"
								},
								"',\n",
								"'config' : '/fgtB.txt'\n",
								"}"
							]
						]
					}
				}
			}
		},
		"FGTAENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				]
			}
		},
		"FGTBENI0": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port1",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PublicSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI0"
								]
							]
						}
					},
					{
						"Key": "Interface",
						"Value": "eth0"
					}
				]
			}
		},
		"FGTAENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI1"
								]
							]
						}
					}
				]
			}
		},
		"FGTBENI1": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port2",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "PrivateSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI1"
								]
							]
						}
					}
				]
			}
		},
		"FGTAENI2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HeartbeatSubnet1"
				},
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiGateAHeartbeatIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI2"
								]
							]
						}
					}
				]
			}
		},
		"FGTBENI2": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port3",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "HeartbeatSubnet2"
				},
				"PrivateIpAddresses": [
					{
						"PrivateIpAddress": {
							"Fn::Select": [
								"0",
								{
									"Fn::Split": [
										"/",
										{
											"Ref": "FortiGateBHeartbeatIP"
										}
									]
								}
							]
						},
						"Primary": "true"
					}
				],
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI2"
								]
							]
						}
					}
				]
			}
		},
		"FGTAENI3": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port4",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "MgmtSubnet1"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtAENI3"
								]
							]
						}
					}
				]
			}
		},
		"FGTBENI3": {
			"Type": "AWS::EC2::NetworkInterface",
			"Properties": {
				"Description": "port4",
				"GroupSet": [
					{
						"Ref": "FGTSecGrpBase"
					}
				],
				"SourceDestCheck": "false",
				"SubnetId": {
					"Ref": "MgmtSubnet2"
				},
				"Tags": [
					{
						"Key": "Name",
						"Value": {
							"Fn::Join": [
								"",
								[
									{
										"Ref": "AWS::StackName"
									},
									"FgtBENI3"
								]
							]
						}
					}
				]
			}
		},
		"ClusterEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtA"
		},
		"FgtAMgmtEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtA"
		},
		"FgtBMgmtEIP": {
			"Type": "AWS::EC2::EIP",
			"Properties": {
				"Domain": "vpc"
			},
			"DependsOn": "FgtB"
		},
		"ClusterAEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"ClusterEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTAENI0"
				}
			},
			"DependsOn": "ClusterEIP"
		},
		"FgtAMgmtEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FgtAMgmtEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTAENI3"
				}
			},
			"DependsOn": "FgtAMgmtEIP"
		},
		"FgtBMgmtEIPASSOCIATION": {
			"Type": "AWS::EC2::EIPAssociation",
			"Properties": {
				"AllocationId": {
					"Fn::GetAtt": [
						"FgtBMgmtEIP",
						"AllocationId"
					]
				},
				"NetworkInterfaceId": {
					"Ref": "FGTBENI3"
				}
			},
			"DependsOn": "FgtBMgmtEIP"
		},
		"LambdaRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": {
								"Service": [
									"lambda.amazonaws.com"
								]
							},
							"Action": [
								"sts:AssumeRole"
							]
						}
					]
				},
				"Path": "/",
				"Policies": [
					{
						"PolicyName": "S3AccessRole",
						"PolicyDocument": {
							"Version": "2012-10-17",
							"Statement": [
								{
									"Effect": "Allow",
									"Action": [
										"s3:PutObject",
										"ec2:DescribeSubnets"
									],
									"Resource": "*"
								},
								{
									"Effect": "Allow",
									"Action": [
										"logs:*"
									],
									"Resource": "*"
								}
							]
						}
					}
				]
			}
		},
		"InitFunction": {
			"Type": "AWS::Lambda::Function",
			"DependsOn": "LambdaRole",
			"Properties": {
				"Code": {
					"ZipFile": {
						"Fn::Join": [
							"\n",
							[
								"import ast",
								"import boto3",
								"import cfnresponse",
								"import json",
								"import logging",
								"import ipaddress",
								"s3 = boto3.client('s3')",
								"ec2client = boto3.client('ec2')",
								"",
								"template = '''\\",
								"config system global",
								"set hostname {Hostname}",
								"end",
								"config system interface",
								"edit port1",
								"set alias public",
								"set mode static",
								"set ip {Port1IP}/{Mask1}",
								"next",
								"edit port2",
								"set alias private",
								"set mode static",
								"set ip {Port2IP}/{Mask2}",
								"set allowaccess ping https ssh",
								"next",
								"edit port3",
								"set alias hasync",
								"set mode static",
								"set ip {Port3IP}/{Mask3}",
								"next",
								"edit port4",
								"set alias hamgmt",
								"set mode static",
								"set ip {Port4IP}/{Mask4}",
								"set allowaccess ping https ssh",
								"next",
								"end",
								"config router static",
								"edit 1",
								"set device port1",
								"set gateway {PublicSubnetRouterIP}",
								"next",
								"edit 2",
								"set dst {VPCCIDR}",
								"set device port2",
								"set gateway {PrivateSubnetRouterIP}",
								"next",
								"end",
								"config firewall policy",
								"edit 1",
								"set name outbound-all",
								"set srcintf port2",
								"set dstintf port1",
								"set srcaddr all",
								"set dstaddr all",
								"set action accept",
								"set schedule always",
								"set service ALL",
								"set logtraffic all",
								"set nat enable",
								"next",
								"end",
								"config system ha",
								"set group-name \"fortinet\"",
								"set group-id 1",
								"set password {HAsecret}",
								"set mode a-p",
								"set hbdev port3 50",
								"set session-pickup enable",
								"set ha-mgmt-status enable",
								"config ha-mgmt-interface",
								"edit 1",
								"set interface port4",
								"set gateway {HAmgmtSubnetRouterIP}",
								"next",
								"end",
								"set override disable",
								"set priority {HApriority}",
								"set unicast-hb enable",
								"set unicast-hb-peerip {HApeer}",
								"end\\",
								"'''",
								"",
								"def handler(event, context):",
								"    subcidr=[]",
								"    mask=[]",
								{"Fn::Join":["",["    for sub in ['",{"Fn::Join":["','",[{"Ref":"PublicSubnet1"},{"Ref":"PrivateSubnet1"},{"Ref":"MgmtSubnet1"},{"Ref":"PublicSubnet2"},{"Ref":"PrivateSubnet2"},{"Ref":"MgmtSubnet2"}]]},"']:"]]},
								"        response = ec2client.describe_subnets(",
								"            SubnetIds=[sub]",
								"        )",
								"        if response['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"            net=response['Subnets'][0]['CidrBlock'].split('/')[0]",
								"            masklocal=response['Subnets'][0]['CidrBlock'].split('/')[1]",
								"            routerIP=ipaddress.ip_address(net)+1",
								"            subcidr.append(str(routerIP))",
								"            mask.append(str(masklocal))",
								"        else:",
								"            responseData = {'msg':'error'}",
								"            cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"",
								"    dict1 = ast.literal_eval(event['ResourceProperties']['FGTAInfo'])",
								"    dict1.update({'PublicSubnetRouterIP':subcidr[0],'PrivateSubnetRouterIP':subcidr[1],'HAmgmtSubnetRouterIP':subcidr[2],'Mask1':mask[0],'Mask2':mask[1],'Mask4':mask[2]})",
								"    dict2 = ast.literal_eval(event['ResourceProperties']['FGTBInfo'])",
								"    dict2.update({'PublicSubnetRouterIP':subcidr[3],'PrivateSubnetRouterIP':subcidr[4],'HAmgmtSubnetRouterIP':subcidr[5],'Mask1':mask[3],'Mask2':mask[4],'Mask4':mask[5]})",
								"    fgtA_conf = template.format(**dict1)",
								"    fgtB_conf = template.format(**dict2)",
								"    fgtA_result = False",
								"    fgtB_result = False",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fgtA_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgtA.txt')",
								"    except Exception as error:",
								"        print('<--!! Exception: %s' % error)",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fgtA_result = True",
								"        print('<-- s3 put_object fgtA.txt successful')",
								"",
								"    try:",
								"        resp = s3.put_object(Body=fgtB_conf, Bucket=event['ResourceProperties']['S3Bucket'], Key='fgtB.txt')",
								"    except Exception as error:",
								"        print('<--!! Exception: %s' % error)",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								"    if resp['ResponseMetadata']['HTTPStatusCode'] == 200:",
								"        fgtB_result = True",
								"        print('<-- s3 put_object fgtB.txt successful')",
								"",
								"    if fgtA_result is True and fgtB_result is True:",
								"        responseData = {'msg':'200'}",
								"        cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)",
								"    else:",
								"        responseData = {'msg':'error'}",
								"        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)",
								""
							]
						]
					}
				},
				"Role": {
					"Fn::GetAtt": [
						"LambdaRole",
						"Arn"
					]
				},
				"Timeout": 120,
				"Handler": "index.handler",
				"Runtime": "python3.6",
				"MemorySize": 128
			}
		},
		"RunInitFunction": {
			"Type": "Custom::InitFunction",
			"DependsOn": "InitFunction",
			"Properties": {
				"ServiceToken": {
					"Fn::GetAtt": [
						"InitFunction",
						"Arn"
					]
				},
				"S3Bucket": {
					"Ref": "InitS3Bucket"
				},
				"FGTAInfo": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAsubnet':'",
							{
								"Ref": "HeartbeatSubnet2"
							},
							"',",
							"'PublicSubnet':'",
							{
								"Ref": "PublicSubnet1"
							},
							"',",
							"'PrivateSubnet':'",
							{
								"Ref": "PrivateSubnet1"
							},
							"',",
							"'MgmtSubnet':'",
							{
								"Ref": "MgmtSubnet1"
							},
							"',",
							"'Port1IP':'",
							{
								"Fn::GetAtt": [
									"FGTAENI0",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'Port2IP':'",
							{
								"Fn::GetAtt": [
									"FGTAENI1",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'Port3IP':'",
							{
								"Fn::GetAtt": [
									"FGTAENI2",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'Mask3':'",
							{
								"Fn::Select" : [ "1", { "Fn::Split": ["/", {"Ref": "FortiGateAHeartbeatIP"}]}]
							},
							"',",
							"'Port4IP':'",
							{
								"Fn::GetAtt": [
									"FGTAENI3",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'HAsecret':'",
							{
								"Ref": "HAsecret"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::GetAtt": [
									"FGTBENI2",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'HApriority':'255',",
							"'Hostname':'FGTA'",
							"}"
						]
					]
				},
				"FGTBInfo": {
					"Fn::Join": [
						"",
						[
							"{",
							"'VPCCIDR':'",
							{
								"Ref": "VPCCIDR"
							},
							"',",
							"'HAsubnet':'",
							{
								"Ref": "HeartbeatSubnet1"
							},
							"',",
							"'PublicSubnet':'",
							{
								"Ref": "PublicSubnet2"
							},
							"',",
							"'PrivateSubnet':'",
							{
								"Ref": "PrivateSubnet2"
							},
							"',",
							"'MgmtSubnet':'",
							{
								"Ref": "MgmtSubnet2"
							},
							"',",
							"'Port1IP':'",
							{
								"Fn::GetAtt": [
									"FGTBENI0",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'Port2IP':'",
							{
								"Fn::GetAtt": [
									"FGTBENI1",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'Port3IP':'",
							{
								"Fn::GetAtt": [
									"FGTBENI2",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'Mask3':'",
							{
								"Fn::Select" : [ "1", { "Fn::Split": ["/", {"Ref": "FortiGateBHeartbeatIP"}]}]
							},
							"',",
							"'Port4IP':'",
							{
								"Fn::GetAtt": [
									"FGTBENI3",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'HAsecret':'",
							{
								"Ref": "HAsecret"
							},
							"',",
							"'HApeer':'",
							{
								"Fn::GetAtt": [
									"FGTAENI2",
									"PrimaryPrivateIpAddress"
								]
							},
							"',",
							"'HApriority':'125',",
							"'Hostname':'FGTB'",
							"}"
						]
					]
				}
			}
		},
		"S3Endpoint": {
			"Type": "AWS::EC2::VPCEndpoint",
			"Properties": {
				"PolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [
						{
							"Effect": "Allow",
							"Principal": "*",
							"Action": [
								"s3:*"
							],
							"Resource": [
								"*"
							]
						}
					]
				},
				"RouteTableIds": [
					{
						"Ref": "RouteTableMgmtSubnet2"
					}
				],
				"ServiceName": {
					"Fn::Join": [
						"",
						[
							"com.amazonaws.",
							{
								"Ref": "AWS::Region"
							},
							".s3"
						]
					]
				},
				"VpcId": {
					"Ref": "VPCID"
				}
			}
		}
	},
	"Outputs": {
		"FGTAURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "FgtAMgmtEIP"
						}
					]
				]
			},
			"Description": "URL to access FortigateA"
		},
		"FGTUsername": {
			"Value": "admin",
			"Description": "Username to access Fortigates"
		},
		"FGTAPassword": {
			"Value": {
				"Ref": "FgtA"
			},
			"Description": "Password to access FortigateA"
		},
		"FGTBURL": {
			"Value": {
				"Fn::Join": [
					"",
					[
						"https://",
						{
							"Ref": "FgtBMgmtEIP"
						}
					]
				]
			},
			"Description": "URL to access FortigateB"
		},
		"FGTBPassword": {
			"Value": {
				"Ref": "FgtA"
			},
			"Description": "Same password as FGTA's"
		}
	}
}
